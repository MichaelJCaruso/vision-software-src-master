/*****  Block Representation Type Shared Declarations  *****/
#ifndef rtBLOCK_D
#define rtBLOCK_D

/***********************************
 *****  Standard Block Macros  *****
 ***********************************/

#define rtBLOCK_CompilerVersion		0
#define rtBLOCK_InitialBV_Size		500
#define rtBLOCK_BlockSize		(sizeof (rtBLOCK_BlockType))

/*****  Selector Descriptor Type Constants  *****/
#define rtBLOCK_C_NoSelector		0
#define rtBLOCK_C_KnownSelector		1
#define rtBLOCK_C_DefinedSelector	2


/*************************************************
 *****  Block Representation Type Structure  *****
 *************************************************/

/************************************************************
 *****		Block Preamble Type Structure		*****
 ************************************************************/
/*-----------------------------------------------------------------------------
 *  The preamble containes indexes into the block.  BuildProgram initializes
 *  the indexes when it creates the container.
 *
 *  Preamble Field Descriptions:
 *	localEnvironment	-  index into the block's local environment.
 *				   Methods contained in the block are evaluated
 *				   in this environment.
 *	byteCodeVector		-  index into the block's byte code vector.
 *	stringSpace		-  index into the block's string space.
 *	physicalLiteralVector	-  index into the block's physical literal
 *				   vector.
 *	evaledLEntryVector	-  index into the block's evaluated literal
 *				   entry vector.
 *
 *----------------------------------------------------------------------------
 */

struct rtBLOCK_PreambleType {
    int  localEnvironment,
	 byteCodeVector,
	 stringSpace,
	 physicalLiteralVector,
	 evaledLEntryVector;
};


/************************************
 *****	Block Selector Type	*****
 ************************************/
/*----------------------------------------------------------------------------
 *  When a block is labeled with a selector, buildProgramCodeBody stores the
 *  type and location of the selector in the Selector type.  Known selectors
 *  return an index into the known selector table.  User defined selectors
 *  are located in the block's string space and are accessed using an index
 *  into it.  If a selector is user defined, one of the block's CPD pointers
 *  points to it for easy access.
 *
 *  Selector Field Descriptions:
 *	selectorType		-  determines type of selector:
 *					rtBLOCK_C_NoSelector,
 *					rtBLOCK_C_KnownSelector,
 *					rtBLOCK_C_DefinedSelector.
 *	selectorIndex		-  if selector is not undefined, selectorIndex
 *				   contains an index into either the known
 *				   selector table or string space depending
 *				   upon the type of the selector.
 *
 *----------------------------------------------------------------------------
 */

struct rtBLOCK_SelectorType {
    short
	selectorType,
        selectorIndex;
};


/******************************************
 *****  	Block Structure	      *****
 ******************************************/
/*---------------------------------------------------------------------------
 *  The block structure is created from the parse tree set up by lex and
 *  yacc.  The BuildProgramCodeBody macro initializes the block and later
 *  calls to the Attach routines in RTblock.c connect the string space,
 *  physical literal vector, and evaluated literal vector on to the container.
 *  Once initialized, a block can not be changed.  Blocks store their
 *  selectors in their string space.
 *
 *  Field Descriptions:
 *	compilerVersion		-  identifies version of compiler.
 *	selector		-  contains selector type and size information.
 *	preamble		-  contains an index into the local
 *				   environment, byte code vector, string space,
 *				   physical literal vector and evaluated
 *				   literal vector.
 *	localEnvironmentPOP	-  a POP to the local environment of the
 *				   block.
 *----------------------------------------------------------------------------
 */

struct rtBLOCK_BlockType {
    int compilerVersion;
    rtBLOCK_SelectorType selector;
    rtBLOCK_PreambleType preamble;
    M_POP localEnvironmentPOP;
};


/************************************
 *****	Byte Code Vector Type	*****
 ************************************/
/*----------------------------------------------------------------------------
 *  The byte code vector contains the byte codes of the block.  GenerateCode
 *  translates the code into byte code form.  BuildProgram transforms the
 *  parse tree generated by generateCode into the ByteCodeVector form.  Byte
 *  codes are incorportated into the container when the container is
 *  initialized.
 *
 *  Field Descriptions:
 *	byteCount		-  the size of the byte code vector.
 *	byteCodeVector		-  pointer to the vector.
 *
 *----------------------------------------------------------------------------
 */

struct rtBLOCK_BCVectorType {
    int byteCount;
    unsigned char byteCodeVector[1];
};


/********************************************
 *****	Physical Literal Vector Type	*****
 ********************************************/
/*----------------------------------------------------------------------------
 *  The physical literal vector contains POPs to other blocks.  The POPs of
 *  nested blocks are contained in the parent block's physical literal
 *  vector.  Physical literal vectors begin as temporary data structures that
 *  are incorportated into the block using rtBLOCK_AppendPLVector.
 *
 *  Field Descriptions:
 *	popCount		-  the number of POPs in the physical literal
 *				   vector.
 *	physicalLiterals	-  pointer to the beginning of the physical
 *				   literal vector.
 *
 *----------------------------------------------------------------------------
 */

struct rtBLOCK_PLVectorType {
    int popCount;
    M_POP physicalLiterals[1];
};


/********************************************
 *****	Evaluated Literal Vector Type	*****
 ********************************************/
/*----------------------------------------------------------------------------
 *  The evaluated literal vector contains the results of computations that
 *  must be executed more than once.  Consequently the results of the
 *  computations may be used several times while the actual computations
 *  only need to be executed once.  The bytecode vector contains entry points
 *  into the byte code vector where the actual code will be stored.  The
 *  bytecode vector contains skips so these sections of code will be jumped
 *  over by the Program Counter and only accessed when needed.
 *
 *  Field Descriptions:
 *	entryCount		-  the size of the evaluated literal vector.
 *	entryPoints		-  offset into the bytecode vector where the
 *				   instruction is stored.
 *
 *----------------------------------------------------------------------------
 */

struct rtBLOCK_ELEVectorType {
        int entryCount;
	int entryPoints[1];
};


/*****  Block Structure Access Macros  *****/

#define rtBLOCK_compilerVersion(p)	((p)->compilerVersion)
#define rtBLOCK_SelectorType(p)		((p)->selector.selectorType)
#define rtBLOCK_SelectorIndex(p)	((p)->selector.selectorIndex)
#define rtBLOCK_byteCodeVector(p)	((p)->preamble.byteCodeVector)
#define rtBLOCK_stringSpace(p)		((p)->preamble.stringSpace)
#define rtBLOCK_localEnvironment(p)	((p)->preamble.localEnvironment)
#define rtBLOCK_localEnvironmentPOP(p)	((p)->localEnvironmentPOP)
#define rtBLOCK_PLVector(p)		((p)->preamble.physicalLiteralVector)
#define rtBLOCK_ELEVector(p)		((p)->preamble.evaledLEntryVector)


/*****  Access Macros for Physical Literal Vector  *****/
#define rtBLOCK_PLVector_Count(p)	((p)->popCount)
#define rtBLOCK_PLVector_POP(p)		((p)->physicalLiterals)

/*****  Access Macros for Evaled Literal Entry Vector  *****/
#define rtBLOCK_ELEVector_Count(p)	((p)->entryCount)
#define rtBLOCK_ELEVector_Points(p)	((p)->entryPoints)


#endif


/************************** SOURCE FILE HISTORY: ************************/
/************************************************************************
  RTBlock.d 1 replace /users/mjc/system
  860404 20:10:20 mjc Create Block Representation Type

 ************************************************************************/
/************************************************************************
  RTblock.d 2 replace /users/hjb/system
  860409 04:45:14 hjb Preliminary Release (jck)

 ************************************************************************/
/************************************************************************
  RTblock.d 3 replace /users/mjc/system
  860527 18:00:05 mjc Changed 'rtBLOCK_CPD_PCCounter' to 'rtBLOCK_CPD_PC'

 ************************************************************************/
/************************************************************************
  RTblock.d 4 replace /users/mjc/system
  860605 16:31:05 mjc Fix non-conforming type names

 ************************************************************************/
/************************************************************************
  RTblock.d 5 replace /users/spe/system
  860624 16:57:22 spe Changed block structure to include a selector.

 ************************************************************************/
/************************************************************************
  RTblock.d 6 replace /users/mjc/system
  860625 10:21:23 mjc Moved type definitions to fix compilation syntax errors

 ************************************************************************/
/************************************************************************
  RTblock.d 7 replace /users/spe/system
  860628 11:58:24 spe Changed selector access macros.

 ************************************************************************/
/************************************************************************
  RTblock.d 8 replace /users/mjc/system
  860817 20:15:35 mjc Converted CPD initializer/instantiator/gc routines to expect nothing of new CPDs

 ************************************************************************/
/************************************************************************
  RTblock.d 9 replace /users/mjc/translation
  870524 09:31:33 mjc Shortened all identifiers to <= 31 characters

 ************************************************************************/
