#!/usr/bin/tcsh

#-------------------------------
# Variables
#-------------------------------

set TestDir = `pwd` 
set LogFile = $TestDir/LOGS/current

#-------------------------------
# Input Argument Check
#-------------------------------

if ($#argv != 2) then
   echo "Usage: ${0} <Type> <Socket>"
   echo "Type: File | Raw"
   echo "Socket: SocketFilePath | SocketAddress"
   exit
else if (${1} != "File" && ${1} != "Raw") then
   echo "Invalid Type in Usage"
   exit
else if (${1} == "File") then
   if (! -e ${2}) then
	echo "Invalid File specified"
	exit
   endif
endif


# Check for Tools Env variable
if (! $?Tools) then
   echo "Tools Environment variable needs to be set"
   exit
endif

set Type = ${1}
set Socket = ${2}

if ($Type == "File") then
   set serverArg = "-serverFile=$Socket"
else
   set serverArg = "-server=$Socket"
endif 

#---------------------------------
# Test
#---------------------------------

echo "-------------------------------------------------" >> $LogFile
echo "Pool     : $Socket" >> $LogFile
echo "TestDate : `date`" >> $LogFile

echo -n "WorkerErrorDetection Test            :"
echo -n "WorkerErrorDetection Test            :" >> $LogFile

#`$Tools/vpooladmin $serverArg -hardRestart`
set TotalWorkers = `$Tools/vpooladmin $serverArg -totalWorkers`
echo "Total number of workers: $TotalWorkers" >> $LogFile

set PIDQuery = "Utility processId"
while ($TotalWorkers > 0) 
   set PID = `$Tools/vpooladmin $serverArg -ping="$PIDQuery"`
   echo "Killing Worker(PID) $PID" >> $LogFile
   kill -9 $PID
    @ TotalWorkers --; 
end

set Result = `$Tools/vpooladmin $serverArg -ping="2+2" -timeout=10`
echo $Result | grep Error >> /dev/null

if ($status == 0) then 
   echo "FAILED"
   echo "FAILED" >> $LogFile
   echo "Worker Failure Error: $Result" >> $LogFile
   exit
else
   echo "PASSED"
   echo "PASSED" >> $LogFile
endif
