#ifndef Vca_IPassiveCallback_Interface
#define Vca_IPassiveCallback_Interface

#ifndef Vca_IPassiveCallback
#define Vca_IPassiveCallback extern
#endif

/************************
 *****  Components  *****
 ************************/

#include "Vca_IClient.h"

/**************************
 *****  Declarations  *****
 **************************/


/*************************
 *****  Definitions  *****
 *************************/

VINTERFACE_TEMPLATE_INSTANTIATIONS (Vca,IPassiveCallback)
/**
 * @class Vca::IPassiveCallback
 *
 * Implemented by servers that support client callback requests; used by passive clients to request interfaces from servers responding to said client's callback request.
 *
 * When responding to client callback requests (typically generated by Vca::IPassiveConnector), servers supporting these requests will need to instantiate a model of the request at hand. Said model must support this interface. This interface is then provided as part of the callback to the client (via Vca::IPassiveClient::AcceptCallback()) so that the client can then use this interface to retrieve other interfaces from the server.
 *
 * Typically, consumers will not need to write implementations of this interface; it's already got a well fleshed-out implementation in Vca::VPassiveCallback.
 *
 * @see Vca::IPassiveConnector
 * @see Vca::IPassiveClient
 * @see Vca::VPassiveCallback
 */

namespace Vca {

    VINTERFACE_ROLE (IPassiveCallback, IClient)
	VINTERFACE_ROLE_2 (QueryService, IVReceiver<IVUnknown*>*, VTypeInfo*)
    VINTERFACE_ROLE_END

    VcaINTERFACE (IPassiveCallback, IClient);
        /**
         * Used by a passive client to request an interface from a server responding to said client's callback request.
         *
         * @param p1 The receiver by which the requested interface should be returned.
         * @param p2 The type of the desired interface.
         */
	VINTERFACE_METHOD_2 (QueryService, IVReceiver<IVUnknown*>*, VTypeInfo*)
    VINTERFACE_END
}

#endif
